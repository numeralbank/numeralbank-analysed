# temp.8 = list.files( pattern="\\.tsv$")
#
# myfiles.8 = lapply(temp.8, read_delim,quote = "")
# #myfiles.3 = lapply(temp.3, read.csv2,row.names=1)
# length(myfiles.8)
# #1 file
# setwd("..")
# setwd("..")
#
# myfiles.8 %>%
#   lapply(ncol) %>%
#   cbind.data.frame() %>%
#   t() -> all.ncols
#
# table(all.ncols)
# # all.ncols
# # 12
# # 1
# #
# #
# # colnames(myfiles.2[[6]])
# # myfiles.2[[6]] <- myfiles.2[[6]][,c(1,3:14)]
# #
#
# for(i in 1:length(myfiles.8)){
#   print(i)
#   print(colnames(myfiles.8[[i]]))
# }
#
# for(i in 1:length(myfiles.8)){
#   myfiles.8[[i]]$X <- NULL
# }
#
#
# do.call(rbind.data.frame, myfiles.8) -> temp.data.8
#
#
#
# setwd("./Enock") #tsv files in the root
# temp.data.9 <- NULL
# temp.9 = list.files( pattern="\\.tsv$")
#
# myfiles.9 = lapply(temp.9, read_delim,quote = "")
# #myfiles.3 = lapply(temp.3, read.csv2,row.names=1)
# length(myfiles.9)
# #3 files
# setwd("..")
#
# myfiles.9 %>%
#   lapply(ncol) %>%
#   cbind.data.frame() %>%
#   t() -> all.ncols
#
# table(all.ncols)
# # all.ncols
# # 12 13
# # 1  2
# #
# #
# # colnames(myfiles.2[[6]])
# # myfiles.2[[6]] <- myfiles.2[[6]][,c(1,3:14)]
# #
#
# for(i in 1:length(myfiles.9)){
#   print(i)
#   print(colnames(myfiles.9[[i]]))
# }
#
# for(i in 1:length(myfiles.9)){
#   myfiles.9[[i]]$...1<- NULL
# }
#
#
# do.call(rbind.data.frame, myfiles.9) -> temp.data.9
#
# ######delete all to----------
read_csv_auto <- function(file) {
first_line <- readLines(file, n = 1)
if (grepl(";", first_line)) {
read.csv(file, sep = ";", stringsAsFactors = FALSE, row.names = NULL, quote = "")
} else {
read.csv(file, sep = ",", stringsAsFactors = FALSE, row.names = NULL, quote = "")
}
}
setwd("./Enock/all_new/")
temp.data.I <- NULL
temp.I = list.files( pattern="\\.csv$")
myfiles.I = lapply(temp.I, read_csv_auto)
names(myfiles.I) <- temp.I
# myfiles.I = lapply(temp.I, read.csv2,quote = "",
#                    row.names = NULL,
#                    stringsAsFactors = FALSE)
length(myfiles.I)
#934 files
setwd("..")
setwd("..")
myfiles.I %>%
lapply(ncol) %>%
cbind.data.frame() %>%
t() -> all.ncols
table(all.ncols)
# 8   9  12  13  14
# 175   1 540 215   3
#
all.ncols %>%
as.data.frame() %>%
filter(V1 == 8) -> the.eights
for(i in 1:nrow(the.eights)){
print(i)
print(colnames(myfiles.I[[rownames(the.eights)[i]]]))
}
all.ncols %>%
as.data.frame() %>%
filter(V1 == 14) -> the.eights
for(i in 1:nrow(the.eights)){
print(i)
print(colnames(myfiles.I[[rownames(the.eights)[i]]]))
}
# for(i in 1:length(myfiles.7)){
#   myfiles.7[[i]]$X <- NULL
# }
do.call(rbind.data.frame, myfiles.7) -> temp.data.7
for(i in 1:length(myfiles.I)){
print(i)
print(colnames(myfiles.I[[i]]))
}
for(i in 1:length(myfiles.I)){
myfiles.I[[i]]$X <- NULL
}
do.call(rbind.data.frame, myfiles.I) -> temp.data.I
setwd("./Enock/all_new/")
temp.data.II <- NULL
temp.II = list.files( pattern="\\.tsv$")
myfiles.II = lapply(temp.II, read_delim,quote = "")
#myfiles.3 = lapply(temp.3, read.csv2,row.names=1)
length(myfiles.II)
#2 files
setwd("..")
setwd("..")
myfiles.II %>%
lapply(ncol) %>%
cbind.data.frame() %>%
t() -> all.ncols
table(all.ncols)
for(i in 1:length(myfiles.II)){
print(i)
print(colnames(myfiles.II[[i]]))
}
for(i in 1:length(myfiles.II)){
myfiles.II[[i]]$X <- NULL
}
do.call(rbind.data.frame, myfiles.II) -> temp.data.II
setwd("./Enock/South_Omotic/")
temp.data.III <- NULL
temp.III = list.files( pattern="\\.tsv$")
myfiles.III = lapply(temp.III, read_delim,quote = "")
#myfiles.3 = lapply(temp.3, read.csv2,row.names=1)
length(myfiles.III)
#1 file
setwd("..")
setwd("..")
myfiles.III %>%
lapply(ncol) %>%
cbind.data.frame() %>%
t() -> all.ncols
table(all.ncols)
for(i in 1:length(myfiles.III)){
print(i)
print(colnames(myfiles.III[[i]]))
}
for(i in 1:length(myfiles.III)){
myfiles.III[[i]]$X <- NULL
}
do.call(rbind.data.frame, myfiles.III) -> temp.data.III
#Merge all datasets
temp.data <- rbind(temp.data.I,
temp.data.II,
temp.data.III)
#Add glosser name
temp.data$Glosser <- "EAT"
#basic checks
colnames(temp.data)
#unique numeral ID's:
temp.data %>%
group_by(ID) %>%
filter(n()>1)
temp.data %>%
distinct() -> temp.data
#try again unique numeral ID's:
temp.data %>%
group_by(ID) %>%
filter(n()>1)  -> dups
#all Language_ID's present
-sort(-table(temp.data$Language_ID, useNA = "ifany"))
sum(is.na(temp.data$Language_ID))
sum(temp.data$Language_ID=="")
temp.data %>%
filter(Language_ID != "") -> temp.data
#all Sources present
-sort(-table(temp.data$Source, useNA = "ifany"))
colnames(all.data)
rbind(all.data,temp.data) -> all.data
all.data %>%
group_by(ID) %>%
filter(n()>1) -> all.duplicates
write.csv(all.duplicates,"all.duplicates.csv")
all.data -> tmp
write.csv(all.data,"all.data.csv")
options(tidyverse.quiet = TRUE)
#set working directory and load data----
#setwd(getSrcDirectory()[1]) # run this line if using plain R
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #run this line if using RStudio
setwd('..')
#Visualize NumValue as non-scientific notation
options(scipen = 1000000000)
all.data <- read.csv("all.data.csv",row.names = 1)
rownames(all.data) <- 1:nrow(all.data)
all.data %>%
mutate(Gloss = ifelse(Gloss == "1.00E+06", 1000000,
ifelse(Gloss == "1.00E+05", 100000,
Gloss))) %>%
mutate(Alternate_gloss = ifelse(Alternate_gloss == "1.00E+06", 1000000,
ifelse(Alternate_gloss == "1.00E+05", 100000,
Alternate_gloss))) -> all.data
all.data %>%
dplyr::select(Gloss) %>%
separate(Gloss,into=letters[1:40]) -> all.characters
all.characters %>%
unlist() %>%
as.data.frame() -> all.characters.column
-sort(-table(all.characters.column$.)) %>%
as.data.frame() -> orthography.words.profile
colnames(orthography.words.profile)[1] <- "Symbol"
write.csv(orthography.words.profile,"orthography.profile.csv")
all.data %>%
mutate(splitGloss = strsplit(Gloss,split="")) %>%
dplyr::select(splitGloss) %>%
unlist() %>%
as.data.frame() ->all.characters.symbol
colnames(all.characters.symbol) <- "Symbol"
-sort(-table(all.characters.symbol)) %>%
as.data.frame() -> characters.profile
write.csv(characters.profile,"characters.profile.csv")
#remove numbers and letters from the latter
characters.profile %>%
filter(!(Symbol %in% 0:9)) %>%
filter(!(Symbol %in% letters))  %>%
filter(!(Symbol %in% LETTERS)) %>%
mutate(Symbol = as.character(Symbol))-> operators.profile
operators.profile$ASCII <- 0
for(i in 1:nrow(operators.profile)){
operators.profile$ASCII[i] = utf8ToInt(operators.profile$Symbol[i])
}
operators.profile %>%
relocate(ASCII, .after = Symbol) -> operators.profile
str(operators.profile)
#-----
operators.profile.raw <- operators.profile
write.csv(operators.profile.raw,"operators.profile.raw.csv")
all.data %>%
filter(is.na(Gloss) | Gloss == "") -> no.gloss
table(no.gloss$Glosser)
write.csv(no.gloss,"no.gloss.csv")
all.data %>%
filter(Gloss != "") -> all.data
#02 Kill spaces
all.data %>%
mutate(Gloss = str_remove_all(Gloss," ")) -> all.data
#03 ? without comment
all.data %>%
filter(Gloss == "?" & (is.na(Comment_glosser) | Comment_glosser == "") ) -> no.comment
table(no.comment$Glosser)
write.csv(no.comment,"no.comment.csv")
all.data %>%
filter(!(Gloss == "?" & (is.na(Comment_glosser) | Comment_glosser == "") ) ) -> all.data
all.data %>%
mutate(Gloss = str_replace_all(Gloss,"·", "⋅"),
# Gloss = str_replace_all(Gloss,"\\.", "⋅"), NOT! THERE IS 12.5 IN MESOAMERICAN LANGUAGES
Gloss = str_replace_all(Gloss,"∙", "⋅"),
Gloss = str_replace_all(Gloss,"-", "−"),
Gloss = str_replace_all(Gloss,"’", "′"),
Gloss = str_replace_all(Gloss,"\\'\\'\\'\\'", "⁗"),
Gloss = str_replace_all(Gloss,"\\'\\'\\'", "‴"),
Gloss = str_replace_all(Gloss,"\\'\\'", "″"),
Gloss = str_replace_all(Gloss,"\\'", "′"),
Gloss = str_replace_all(Gloss,"”′", "‴"),
Gloss = str_replace_all(Gloss,"\"\"", "⁗"),
Gloss = str_replace_all(Gloss,"”\"", "⁗"),
Gloss = str_replace_all(Gloss,"”", "″"),
Gloss = str_replace_all(Gloss,"′", "′"),
Gloss = str_replace_all(Gloss,"\"", "″")
)  -> all.data
all.data %>%
mutate(rb = str_count(Gloss,"\\(") == str_count(Gloss,"\\)"), #matching round brackets
sb = str_count(Gloss,"\\[") == str_count(Gloss,"\\]"), #matching square brackets
cb = str_count(Gloss,"\\{") == str_count(Gloss,"\\}") #matching curly brackets
) %>%
filter(rb*sb*cb == 0) -> non.matching.brackets
table(non.matching.brackets$Glosser)
write.csv(non.matching.brackets,"non.matching.brackets.csv")
all.data %>%
filter(!(ID %in% non.matching.brackets$ID) ) -> all.data
all.data %>%
mutate(Gloss.clean = gsub("\\{.*?\\}","",Gloss)) %>%  #.*? NON GREEDY
mutate(Gloss.math = gsub("\\[","",Gloss.clean),
Gloss.math = gsub("\\]","",Gloss.math)) %>%
mutate(Gloss.math = gsub("′","",Gloss.math),
Gloss.math = gsub("″","",Gloss.math),
Gloss.math = gsub("‴","",Gloss.math),
Gloss.math = gsub("⁗","",Gloss.math)) -> all.data
all.data %>%
dplyr::select(Gloss.clean) %>%
separate(Gloss.clean,into=letters[1:45]) -> all.characters
all.characters %>%
unlist() %>%
as.data.frame() -> all.characters.column
-sort(-table(all.characters.column$.)) %>%
as.data.frame() -> orthography.words.profile
colnames(orthography.words.profile)[1] <- "Symbol"
all.data %>%
mutate(splitGloss.clean = strsplit(Gloss.clean,split="")) %>%
dplyr::select(splitGloss.clean) %>%
unlist() %>%
as.data.frame() ->all.characters.symbol
colnames(all.characters.symbol) <- "Symbol"
-sort(-table(all.characters.symbol)) %>%
as.data.frame() -> characters.profile
#remove numbers and letters from the latter
characters.profile %>%
filter(!(Symbol %in% 0:9)) %>%
# filter(!(Symbol %in% letters))  %>%
# filter(!(Symbol %in% LETTERS)) %>%
mutate(Symbol = as.character(Symbol))-> operators.profile
operators.profile$ASCII <- 0
for(i in 1:nrow(operators.profile)){
operators.profile$ASCII[i] = utf8ToInt(operators.profile$Symbol[i])
}
operators.profile %>%
relocate(ASCII, .after = Symbol) -> operators.profile
str(operators.profile)
write.csv(operators.profile,"operators.profile.csv")
allowed.symbols <- c("½", "⅓", "⅔", "¼", "¾",
"+", "⋅", "−", "÷",
"(", ")", "[", "]", "{", "}",
"′", "″", "‴", "⁗", "?",".")
operators.profile %>%
filter(!(Symbol %in% allowed.symbols)) %>%
dplyr::select(Symbol)->  non.allowed.symbols
non.allowed.symbols %>%
unlist() %>%
paste0(collapse = "") -> this
paste0("[",this,"]", collapse="") -> that
forbidden.characters <- NULL
ifelse(that == "[]", 0==0 ,
forbidden.characters <-  all.data[(grepl(that,all.data$Gloss.clean)),])
table(forbidden.characters$Glosser)
if(that != "[]"){write_csv(forbidden.characters,"forbidden.characters.csv")}
all.data %>%
filter(!(ID %in% forbidden.characters$ID)) -> all.data
all.data %>%
mutate(Gloss.calc = gsub("⋅","\\*",Gloss.math),
Gloss.calc = gsub("−","-",Gloss.calc),
Gloss.calc = gsub("½","(1/2)",Gloss.calc),
Gloss.calc = gsub("⅓","(1/3)",Gloss.calc),
Gloss.calc = gsub("⅔","(2/3)",Gloss.calc),
Gloss.calc = gsub("¼","(1/4)",Gloss.calc),
Gloss.calc = gsub( "¾","(3/4)",Gloss.calc),
Gloss.calc = gsub( "\\?",NA,Gloss.calc)) -> all.data
all.data %>%
mutate(Gloss.calc = gsub("([0-9\\.]+)\\*([0-9\\.]+)", "\\(\\1\\*\\2\\)", Gloss.calc), #multiplication first
Gloss.calc = gsub("([0-9\\.]+)\\/([0-9\\.]+)", "\\(\\1\\/\\2\\)", Gloss.calc), #division second
Gloss.calc = gsub("([0-9\\.]+)-([0-9\\.]+)", "\\(\\1-\\2\\)", Gloss.calc)) -> all.data #subtraction last
all.data %>%
mutate(Gloss.calc = gsub("\\(","abs\\(",Gloss.calc)) -> all.data
all.data %>%
mutate(Math.well.defined =  ifelse(is.na(Gloss.calc) , NA,
sapply(gsub("(\\d)\\(","\\1*(",Gloss.calc),
function(x) tryCatch({ eval(parse(text = x))
1},
error = function(e) 0)
)  )) -> this
this %>%
filter(Math.well.defined == 0 ) -> math.not.well.defined
table(math.not.well.defined$Glosser)
write.csv(math.not.well.defined,"math.not.well.defined.csv")
this %>%
filter(Gloss.calc == "") -> no.math
write.csv(no.math,"no.math.csv")
this %>%
filter(Math.well.defined == 1) %>%
filter(Gloss.calc != "") %>%
mutate(Math.check = sapply(gsub("(\\d)\\(","\\1*(",Gloss.calc),function(x) eval(parse(text = x))),
Math.check = unlist(Math.check),
Math.check = abs(Math.check)) -> that
that$Math.check %>%
lengths() %>%
as.data.frame()-> tmp
that %>%
mutate(Does.math.work = Math.check == NumberValue) -> all.data.checked
table(all.data.checked$Does.math.work,
all.data.checked$Glosser)
all.data.checked %>%
filter(Does.math.work == FALSE) -> bad.math
table(bad.math$Glosser)
write.csv(bad.math, "bad.math.csv")
all.data.checked %>%
filter(Does.math.work == TRUE) -> all.data.checked
write.csv(all.data.checked,"all.data.checked.csv")
write.csv(all.data, "all.data.glossed.csv")
table(all.data$Glosser) %>% as.data.frame()-> characters.glossed
all.data %>%
count(Language_ID,Gloss,Glosser) %>%
group_by(Glosser) %>%
mutate(Glosses = n()) %>%
ungroup() %>%
count(Language_ID,Glosser,Glosses) %>%
group_by(Glosser) %>%
mutate(Languages = n()) %>%
dplyr::select(Glosser,Languages,Glosses) %>%
distinct() %>%
arrange(desc(Languages)) %>%
mutate(G.per.L = Glosses/Languages)-> stats
write.csv(stats,"stats.glosses.csv")
all.data.checked %>%
mutate(Gloss.math = gsub("\\+\\+","\\+",Gloss.math),
Gloss.math = str_remove(Gloss.math,"^(\\+)"))  -> all.data.checked
#this ignores the cases with two occurrences, e.g. ⋅1 and ⋅10 in the same line
all.data.checked %>%
mutate(Gloss.math.with.ones = Gloss.math) %>%
mutate(Gloss.math = ifelse(grepl("⋅1\\d+",Gloss.math),Gloss.math,gsub("⋅1","",Gloss.math))) %>%
mutate(Gloss.math = ifelse(grepl("\\d+1⋅",Gloss.math),Gloss.math,gsub("1⋅","",Gloss.math))) -> all.data.checked
#this should work, but I have to fix it
all.data.checked %>%
mutate(Gloss.math.with.ones = Gloss.math) %>%
mutate(Gloss.math = gsub("⋅1(!\\d+)","\\1",Gloss.math)) %>%
mutate(Gloss.math = gsub("(!\\d+)1⋅","\\1",Gloss.math)) %>%
mutate(Gloss.math = str_remove(Gloss.math,"^(1⋅)")) %>%
mutate(Gloss.math = str_remove(Gloss.math,"(⋅1)$")) ->all.data.checked
all.data.checked %>%
mutate(Gloss.math = gsub("\\(\\(([0-9]+)\\)\\)","\\1",Gloss.math)) %>% #((n))
mutate(Gloss.math = gsub("\\(\\(([0-9]+)\\+([0-9]+)\\)\\)","\\+\\1\\+\\2",Gloss.math))  %>% #((n+m))
mutate(Gloss.math = gsub("\\(\\(([0-9]+)−([0-9]+)\\)\\)","\\(\\1\\−\\2\\)",Gloss.math)) %>% #((n−m))
mutate(Gloss.math = gsub("\\(\\(([0-9]+)⋅([0-9]+)\\)\\)","\\1⋅\\2\\",Gloss.math)) %>% #((n⋅m))
as.data.frame() -> all.data.checked
all.data.checked %>%
mutate(Gloss.math = gsub("\\(([0-9]+)\\)","\\1",Gloss.math)) %>% #(n)
mutate(Gloss.math = gsub("\\+\\(([0-9]+)\\+([0-9]+)\\)","\\+\\1\\+\\2",Gloss.math))  %>% #+(n+m)
mutate(Gloss.math = gsub("\\(([0-9]+)\\+([0-9]+)\\)\\+","\\1\\+\\2\\+",Gloss.math)) %>% #(n+m)+
mutate(Gloss.math = gsub("\\(([0-9]+)⋅([0-9]+)\\)","\\1⋅\\2",Gloss.math)) %>% #(n⋅m)
mutate(Gloss.math = gsub("^\\(([0-9]+)−([0-9]+)\\)$","\\1−\\2",Gloss.math)) %>% #^(n−m)$
mutate(Gloss.math = gsub("^\\(([0-9]+)+([0-9]+)\\)$","\\1+\\2",Gloss.math)) %>% #^(n+m)$
as.data.frame() -> all.data.checked
all.data.checked %>%
mutate(Gloss.math = gsub("\\(([0-9]+)\\+([0-9]+)\\+([0-9]+)\\)","\\1\\+\\2\\+\\3",Gloss.math)) %>% #(n+m+q)
mutate(Gloss.math = gsub("\\(([0-9]+)⋅([0-9]+)⋅([0-9]+)\\)","\\1⋅\\2⋅\\3",Gloss.math)) %>% #(n⋅m⋅q)
mutate(Gloss.math = gsub("\\(\\(([0-9]+)\\+([0-9]+)\\)⋅([0-9]+)\\)","\\(\\1\\+\\2\\)⋅\\3",Gloss.math)) %>% #((n+m)⋅q)
mutate(Gloss.math = gsub("\\(([0-9]+)⋅\\(([0-9]+)\\+([0-9]+)\\)\\)","\\1⋅\\(\\2\\+3\\)",Gloss.math)) %>% #(q⋅(n+m))
mutate(Gloss.math = gsub("\\(\\(([0-9]+)−([0-9]+)\\)⋅([0-9]+)\\)","\\(\\1−\\2\\)⋅\\3",Gloss.math)) %>% #((n−m)⋅q)
mutate(Gloss.math = gsub("\\(([0-9]+)⋅\\(([0-9]+)−([0-9]+)\\)\\)","\\1⋅\\(\\2−3\\)",Gloss.math)) %>% #(q⋅(n−m))
as.data.frame() -> all.data.checked
all.data.checked %>%
mutate(Gloss.math = str_remove(Gloss.math,"\\+0")) -> all.data.checked
write.csv(all.data.checked,"all.data.checked.csv")
all.data.checked %>% filter(Glosser == "RB") -> all.data.checked.RB
write.csv(all.data.checked.RB,"all.data.checked.RB.csv")
all.data.checked.RB %>%
distinct(Language_ID) %>% nrow()
all.data %>% filter(Glosser == "RB") -> all.data.RB
write.csv(all.data.RB,"all.data.RB.csv")
all.data.RB %>%
distinct(Language_ID) %>% nrow()
all.data.checked %>%
mutate(Gloss.math = gsub("\\(([0-9]+)\\+([0-9]+)\\+([0-9]+)\\)","\\1\\+\\2\\+\\3",Gloss.math)) %>% #(n+m+q)
mutate(Gloss.math = gsub("\\(([0-9]+)⋅([0-9]+)⋅([0-9]+)\\)","\\1⋅\\2⋅\\3",Gloss.math)) %>% #(n⋅m⋅q)
mutate(Gloss.math = gsub("\\(\\(([0-9]+)\\+([0-9]+)\\)⋅([0-9]+)\\)","\\(\\1\\+\\2\\)⋅\\3",Gloss.math)) %>% #((n+m)⋅q)
mutate(Gloss.math = gsub("\\(([0-9]+)⋅\\(([0-9]+)\\+([0-9]+)\\)\\)","\\1⋅\\(\\2\\+3\\)",Gloss.math)) %>% #(q⋅(n+m))
mutate(Gloss.math = gsub("\\(\\(([0-9]+)−([0-9]+)\\)⋅([0-9]+)\\)","\\(\\1−\\2\\)⋅\\3",Gloss.math)) %>% #((n−m)⋅q)
mutate(Gloss.math = gsub("\\(([0-9]+)⋅\\(([0-9]+)−([0-9]+)\\)\\)","\\1⋅\\(\\2−3\\)",Gloss.math)) %>% #(q⋅(n−m))
as.data.frame() -> all.data.checked
all.data.checked %>%
mutate(Gloss.math = str_remove(Gloss.math,"\\+0")) -> all.data.checked
write.csv(all.data.checked,"all.data.checked.csv")
all.data.checked %>% filter(Glosser == "RB") -> all.data.checked.RB
write.csv(all.data.checked.RB,"all.data.checked.RB.csv")
all.data.checked.RB %>%
distinct(Language_ID) %>% nrow()
all.data %>% filter(Glosser == "RB") -> all.data.RB
write.csv(all.data.RB,"all.data.RB.csv")
all.data.RB %>%
distinct(Language_ID) %>% nrow()
all.data.checked %>%
count(NumberValue, Gloss.math) %>%
group_by(NumberValue) %>%
mutate(prop = prop.table(n),
number.strategies = n()) -> all.strategies
write.csv(all.strategies,"all.strategies.csv")
#loans----
table(all.data$Loan)
all.data %>%
mutate(Loan = ifelse(Loan == "FALSCH" | Loan == "false" | is.na(Loan), FALSE,
ifelse(Loan == "WAHR" | Loan == "true", TRUE,
Loan)),
Loan = as.logical(Loan))  -> tmp
table(tmp$Loan, useNA = "ifany")/nrow(tmp)
tmp %>%
filter(Loan == T) -> borrowed
-sort(-table(borrowed$NumberValue)) %>% as.data.frame() %>% View()
-sort(-table(borrowed$Language_ID))
#-------
View(no.gloss)
View(no.comment)
View(bad.math)
