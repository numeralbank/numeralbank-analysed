TRUE ~ NA_character_
))
bases_austronesian_numerals <- bases_austronesian_numerals[, c("Language.name", "Glottocode", "Family", "BASES", "Latitude", "Longitude")]# "Latitude", "Longitude",
#taxa
languages <- read_csv("Data/language_sample.csv") %>%
select('tree_name', 'Name', 'Glottocode', 'Family', 'ID')
bases_austronesian_numerals.taxa <- left_join(languages, bases_austronesian_numerals, by = "Glottocode") %>% rename( Bases = BASES)%>%
filter(!is.na(Bases))
# decimal vs non-decimal coding: code decimal - 1 iff 10 is a base and everyother non-decimal - 0
decimal_non_decimal <- bases_austronesian_numerals.taxa %>%
mutate(decimal = case_when(
Bases == "base_10" ~ 1,
Bases == "base_10_20" ~ 1,
Bases == "base_5_10" ~ 1,
Bases == "base_5_10_20" ~1,
Bases == "base_2_5_10" ~1,
Bases == "unknown" ~ NA_real_,
TRUE ~0,
))
bases_austronesian_numerals.taxa <- left_join(languages, bases_austronesian_numerals, by = "Glottocode") %>% rename( Bases = BASES)%>%
filter(!is.na(Bases))
View(bases_austronesian_numerals.taxa)
languages <- bases_austronesian_numerals.taxa %>% select(Name, Glottocode)
lang <- bases_austronesian_numerals.taxa %>% select(Name, Glottocode)
View(lang)
lang <- bases_austronesian_numerals.taxa %>% select(Name, Glottocode) %>%
rename(glottocode = Glottocode)
new <- left_join(merged2, lang, by = "glottocode")
View(new)
new <- left_join(lang, merged2, by = "glottocode")
View(new)
setwd("~/Documents")
new2<- read_csv('decimal_loss/data/language_sample.csv')
View(new2)
new2 <- read_csv('decimal_loss/data/language_sample.csv') %>%
rename(glottocode = Glottocode)
new3 <- left_join(new2, merged2, by = "glottocode")
View(new3)
View(merged2)
new3 <- left_join(new2, merged2, by = "glottocode")
View(new)
View(new2)
new2 <- read_csv('decimal_loss/data/language_sample.csv') %>%
rename(glottocode = Glottocode) %>%
select(Name, glottoname, Glottolog_name, tree_name)
new2 <- read_csv('decimal_loss/data/language_sample.csv') %>%
rename(glottocode = Glottocode) %>%
select(Name, glottocode, Glottolog_name, tree_name)
new2 <- read_csv('decimal_loss/data/language_sample.csv') %>%
select(Name, Glottocode, Glottolog_name, tree_name) %>%
rename(glottocode = Glottocode)
new2 <- read_csv('decimal_loss/data/language_sample.csv') %>%
select(Name, Glottocode, Glottolog_name, tree_name)
new2 <- read_csv('decimal_loss/data/language_sample.csv') %>%
select(Name, Glottocode, Glottolog_Name, tree_name) %>%
rename(glottocode = Glottocode)
new3 <- left_join(new2, merged2, by = "glottocode")
View(new3)
merged2 <- merged %>% mutate(glottocode = str_extract(Language_ID, "(?<=-)[a-z0-9]+")) %>%
filter(!is.na(glottocode))
new3 <- left_join(new2, merged2, by = "glottocode")
View(decimal_non_decimal)
new3 <- left_join(new2, merged2, by = "glottocode") %>%
filter(!is.na(ID))
new3 <- left_join(new2, merged2, by = "glottocode")
View(new3)
setwd("~/Documents/Numeralbank_analysed/etc/glossed")
folder_path <- "Russell_2"
csv_files <- list.files(folder_path, pattern = "\\.csv$", full.names = TRUE)
# Force all columns to be character
combined_data <- map_dfr(csv_files, ~ read_csv(.x, col_types = cols(.default = col_character()))) %>%
select(ID, Language_ID, Parameter_ID, NumberValue, Value, Form, Gloss, Comment_glosser, Alternate_gloss, Loan, Source)
setwd("~/Documents/Numeralbank_analysed/etc/glossed")
folder_path <- "Russell_2"
csv_files <- list.files(folder_path, pattern = "\\.csv$", full.names = TRUE)
# Force all columns to be character
combined_data <- map_dfr(csv_files, ~ read_csv(.x, col_types = cols(.default = col_character()))) %>%
select(ID, Language_ID, Parameter_ID, NumberValue, Value, Form, Gloss, Comment_glosser, Alternate_gloss, Loan, Source)
View(combined_data)
folder_path2 <- "Russell"
csv_files2 <- list.files(folder_path2, pattern = "\\.csv$", full.names = TRUE)
combined_data2 <- map_dfr(csv_files2, ~ read_csv(.x, col_types = cols(.default = col_character()))) %>%
select(ID, Language_ID, Parameter_ID, NumberValue, Value, Form, Gloss, Comment_glosser, Alternate_gloss, Loan, Source)
folder_path3 <- "Russell_3"
csv_files3 <- list.files(folder_path3, pattern = "\\.csv$", full.names = TRUE)
combined_data3 <- map_dfr(csv_files3, ~ read_csv(.x, col_types = cols(.default = col_character()))) %>%
select(ID, Language_ID, Parameter_ID, NumberValue, Value, Form, Gloss, Comment_glosser, Alternate_gloss, Loan, Source)
merged <- rbind(combined_data, combined_data2, combined_data3)
View(merged)
merged2 <- merged %>% mutate(glottocode = str_extract(Language_ID, "(?<=-)[a-z0-9]+")) %>%
filter(!is.na(glottocode))
View(merged2)
new2 <- read_csv('decimal_loss/data/language_sample.csv') %>%
select(Name, Glottocode, Glottolog_Name, tree_name) %>%
rename(glottocode = Glottocode)
new2 <- read_csv('/Users/enock/Documents/decimal_loss/data/language_sample.csv') %>%
select(Name, Glottocode, Glottolog_Name, tree_name) %>%
rename(glottocode = Glottocode)
glossed_values <- read_csv('/Users/enock/Documents/decimal_loss/data/language_sample.csv') %>%
select(Name, Glottocode, Glottolog_Name, tree_name) %>%
rename(glottocode = Glottocode)
glossed_values2 <- left_join(glossed_values, merged2, by = "glottocode") %>%
filter(!is.na(ID))
library(readr)
library(tidyverse)
#create a dataframe
if (!exists("CodedNumeralBankFeatures")) {
CodedNumeralBankFeatures <- tibble(
Feature_ID = character(),
Glottocode = character(),
Source = character(),
Value = character()
)
}
# function to check if a "Gloss" contains an arithmetic operator and that none of the constituents is equal to the parameter in focus
is_derived <- function(Gloss, NumberValue) {
if (is.na(Gloss)) {
return(NA)  # Return NA if Gloss is missing
} else if (Gloss == "?") {
return("?")  # Return '?' for incomplete or unclear data
} else if (grepl("\\+|\\-|\\Â·", Gloss) && Gloss != as.character(NumberValue)) {
return("1")  # Derived if it contains arithmetic operator and is not equal to NumberValue
} else if (Gloss == as.numeric(NumberValue)) {
return("0")  # Not derived if Gloss equals NumberValue
} else {
return("0")  # Default to not derived if no operator and no match to NumberValue
}
}
# Function to process and populate based on whether the Gloss is derived
is_this_numeral_derived <- function(feature_id, NumberValue, logic_function, data) {
# gets unique Glottocodes
glottocodes <- unique(data$Glottocode)
# a loop through each Glottocode
for (glotto in glottocodes) {
# Filter data for the specific NumberValue and Glottocode
filtered_data <- data[data$NumberValue == NumberValue & data$Glottocode == glotto, ]
if (nrow(filtered_data) == 0) {
# If no data for the specific NumberValue, set value to "ID"
CodedNumeralBankFeatures <<- rbind(CodedNumeralBankFeatures, data.frame(
Feature_ID = feature_id,
Glottocode = glotto,
Source = NA,  # Set source to NA or another default value
Value = "ID",
stringsAsFactors = FALSE
))
} else {
# If NumberValue exists, apply the logic function to each Gloss
for (i in 1:nrow(filtered_data)) {
Gloss_value <- filtered_data$Gloss[i]
value <- logic_function(Gloss_value, NumberValue)
# Add a new row (preserving Source and Coder if available)
CodedNumeralBankFeatures <<- rbind(CodedNumeralBankFeatures, data.frame(
Feature_ID = feature_id,
Glottocode = filtered_data$Glottocode[i],
Source = filtered_data$Source[i],
Value = value,
stringsAsFactors = FALSE
))
}
}
}
}
merged3 <- merged2%>% rename(Glottocode = glottocode)
#run the function: NB02	Is there a 3 derived by arithmetic operation?
is_this_numeral_derived ("NB02", 3, is_derived, merged3)
is_this_numeral_derived ("NB04", 4, is_derived, merged3)
is_this_numeral_derived ("NB06", 5, is_derived, merged3)
is_this_numeral_derived ("NB08", 6, is_derived, merged3)
is_this_numeral_derived ("NB10", 7, is_derived, merged3)
is_this_numeral_derived ("NB12", 8, is_derived, merged3)
is_this_numeral_derived ("NB14", 9, is_derived, merged3)
is_this_numeral_derived ("NB16", 10, is_derived, merged3)
is_this_numeral_derived ("NB24", 20, is_derived, merged3)
View(CodedNumeralBankFeatures)
coded <- CodedNumeralBankFeatures %>% pivot_wider(names_from = "Feature_ID"
values_from = "Value")
coded <- CodedNumeralBankFeatures %>% pivot_wider(names_from = "Feature_ID",
values_from = "Value")
coded <- CodedNumeralBankFeatures %>% pivot_wider(names_from = c("Feature_ID", "Glottocode"),
values_from = "Value")
View(coded)
coded <- CodedNumeralBankFeatures %>% pivot_wider(names_from = "Feature_ID",
values_from = "Value")
setwd("~/Documents/Numeralbank_analysed/etc/glossed")
library(readr)
library(purrr)
library(dplyr)
folder_path <- "Russell_2"
csv_files <- list.files(folder_path, pattern = "\\.csv$", full.names = TRUE)
# Force all columns to be character
combined_data <- map_dfr(csv_files, ~ read_csv(.x, col_types = cols(.default = col_character()))) %>%
select(ID, Language_ID, Parameter_ID, NumberValue, Value, Form, Gloss, Comment_glosser, Alternate_gloss, Loan, Source)
folder_path2 <- "Russell"
csv_files2 <- list.files(folder_path2, pattern = "\\.csv$", full.names = TRUE)
combined_data2 <- map_dfr(csv_files2, ~ read_csv(.x, col_types = cols(.default = col_character()))) %>%
select(ID, Language_ID, Parameter_ID, NumberValue, Value, Form, Gloss, Comment_glosser, Alternate_gloss, Loan, Source)
folder_path3 <- "Russell_3"
csv_files3 <- list.files(folder_path3, pattern = "\\.csv$", full.names = TRUE)
combined_data3 <- map_dfr(csv_files3, ~ read_csv(.x, col_types = cols(.default = col_character()))) %>%
select(ID, Language_ID, Parameter_ID, NumberValue, Value, Form, Gloss, Comment_glosser, Alternate_gloss, Loan, Source)
merged <- rbind(combined_data, combined_data2, combined_data3)
merged2 <- merged %>% mutate(glottocode = str_extract(Language_ID, "(?<=-)[a-z0-9]+")) %>%
filter(!is.na(glottocode))
glossed_values <- read_csv('/Users/enock/Documents/decimal_loss/data/language_sample.csv') %>%
select(Name, Glottocode, Glottolog_Name, tree_name) %>%
rename(glottocode = Glottocode)
glossed_values2 <- left_join(glossed_values, merged2, by = "glottocode") %>%
filter(!is.na(ID))
is_this_numeral_derived <- function(feature_id, NumberValue, logic_function, data) {
# gets unique Glottocodes
glottocodes <- unique(data$Glottocode)
# a loop through each Glottocode
for (glotto in glottocodes) {
# Filter data for the specific NumberValue and Glottocode
filtered_data <- data[data$NumberValue == NumberValue & data$Glottocode == glotto, ]
if (nrow(filtered_data) == 0) {
# If no data for the specific NumberValue, set value to "ID"
CodedNumeralBankFeatures <<- rbind(CodedNumeralBankFeatures, data.frame(
Feature_ID = feature_id,
Glottocode = glotto,
Source = NA,  # Set source to NA or another default value
Value = "ID",
stringsAsFactors = FALSE
))
} else {
# If NumberValue exists, apply the logic function to each Gloss
for (i in 1:nrow(filtered_data)) {
Gloss_value <- filtered_data$Gloss[i]
value <- logic_function(Gloss_value, NumberValue)
# Add a new row (preserving Source and Coder if available)
CodedNumeralBankFeatures <<- rbind(CodedNumeralBankFeatures, data.frame(
Feature_ID = feature_id,
Glottocode = filtered_data$Glottocode[i],
Source = filtered_data$Source[i],
Value = value,
stringsAsFactors = FALSE
))
}
}
}
}
is_this_numeral_derived <- function(feature_id, NumberValue, logic_function, data) {
# gets unique Glottocodes
glottocodes <- unique(data$Glottocode)
# a loop through each Glottocode
for (glotto in glottocodes) {
# Filter data for the specific NumberValue and Glottocode
filtered_data <- data[data$NumberValue == NumberValue & data$Glottocode == glotto, ]
if (nrow(filtered_data) == 0) {
# If no data for the specific NumberValue, set value to "ID"
CodedNumeralBankFeatures <<- rbind(CodedNumeralBankFeatures, data.frame(
Feature_ID = feature_id,
Glottocode = glotto,
Source = NA,  # Set source to NA or another default value
Value = "ID",
stringsAsFactors = FALSE
))
} else {
# If NumberValue exists, apply the logic function to each Gloss
for (i in 1:nrow(filtered_data)) {
Gloss_value <- filtered_data$Gloss[i]
value <- logic_function(Gloss_value, NumberValue)
# Add a new row (preserving Source and Coder if available)
CodedNumeralBankFeatures <<- rbind(CodedNumeralBankFeatures, data.frame(
Feature_ID = feature_id,
Glottocode = filtered_data$Glottocode[i],
Source = filtered_data$Source[i],
Value = value,
stringsAsFactors = FALSE
))
}
}
}
}
merged3 <- merged2%>% rename(Glottocode = glottocode)
#run the function: NB02	Is there a 3 derived by arithmetic operation?
is_this_numeral_derived ("NB02", 3, is_derived, merged3)
is_derived <- function(Gloss, NumberValue) {
if (is.na(Gloss)) {
return(NA)  # Return NA if Gloss is missing
} else if (Gloss == "?") {
return("?")  # Return '?' for incomplete or unclear data
} else if (grepl("\\+|\\-|\\Â·", Gloss) && Gloss != as.character(NumberValue)) {
return("1")  # Derived if it contains arithmetic operator and is not equal to NumberValue
} else if (Gloss == as.numeric(NumberValue)) {
return("0")  # Not derived if Gloss equals NumberValue
} else {
return("0")  # Default to not derived if no operator and no match to NumberValue
}
}
is_this_numeral_derived ("NB02", 3, is_derived, merged3)
merged3 <- merged2%>% rename(Glottocode = glottocode)
is_this_numeral_derived ("NB02", 3, is_derived, merged3)
is_derived <- function(Gloss, NumberValue) {
if (is.na(Gloss)) {
return(NA)  # Return NA if Gloss is missing
} else if (Gloss == "?") {
return("?")  # Return '?' for incomplete or unclear data
} else if (grepl("\\+|\\-|\\Â·", Gloss) && Gloss != as.character(NumberValue)) {
return("1")  # Derived if it contains arithmetic operator and is not equal to NumberValue
} else if (Gloss == as.numeric(NumberValue)) {
return("0")  # Not derived if Gloss equals NumberValue
} else {
return("0")  # Default to not derived if no operator and no match to NumberValue
}
}
#run the function: NB02	Is there a 3 derived by arithmetic operation?
is_this_numeral_derived ("NB02", 3, is_derived, merged3)
is_derived <- function(Gloss, NumberValue) {
if (is.na(Gloss)) {
return(NA)  # Return NA if Gloss is missing
} else if (Gloss == "?") {
return("?")  # Return '?' for incomplete or unclear data
} else if (grepl("\\+|\\-|\\Â·", Gloss) && Gloss != as.character(NumberValue)) {
return("1")  # Derived if it contains arithmetic operator and is not equal to NumberValue
} else if (Gloss == as.numeric(NumberValue)) {
return("0")  # Not derived if Gloss equals NumberValue
} else {
return("0")  # Default to not derived if no operator and no match to NumberValue
}
}
merged3 <- merged2%>% rename(Glottocode = glottocode)
is_this_numeral_derived ("NB02", 3, is_derived, merged3)
is_derived <- function(Gloss, NumberValue) {
if (is.na(Gloss)) {
return(NA)  # Return NA if Gloss is missing
} else if (Gloss == "?") {
return("?")  # Return '?' for incomplete or unclear data
} else if (grepl("\\+|\\-|\\Â·", Gloss) && Gloss != as.character(NumberValue)) {
return("1")  # Derived if it contains arithmetic operator and is not equal to NumberValue
} else if (Gloss == as.numeric(NumberValue)) {
return("0")  # Not derived if Gloss equals NumberValue
} else {
return("0")  # Default to not derived if no operator and no match to NumberValue
}
}
if (!exists("CodedNumeralBankFeatures")) {
CodedNumeralBankFeatures <- tibble(
Feature_ID = character(),
Glottocode = character(),
Source = character(),
Value = character()
)
}
# function to check if a "Gloss" contains an arithmetic operator and that none of the constituents is equal to the parameter in focus
is_derived <- function(Gloss, NumberValue) {
if (is.na(Gloss)) {
return(NA)  # Return NA if Gloss is missing
} else if (Gloss == "?") {
return("?")  # Return '?' for incomplete or unclear data
} else if (grepl("\\+|\\-|\\Â·", Gloss) && Gloss != as.character(NumberValue)) {
return("1")  # Derived if it contains arithmetic operator and is not equal to NumberValue
} else if (Gloss == as.numeric(NumberValue)) {
return("0")  # Not derived if Gloss equals NumberValue
} else {
return("0")  # Default to not derived if no operator and no match to NumberValue
}
}
# Function to process and populate based on whether the Gloss is derived
is_this_numeral_derived <- function(feature_id, NumberValue, logic_function, data) {
# gets unique Glottocodes
glottocodes <- unique(data$Glottocode)
# a loop through each Glottocode
for (glotto in glottocodes) {
# Filter data for the specific NumberValue and Glottocode
filtered_data <- data[data$NumberValue == NumberValue & data$Glottocode == glotto, ]
if (nrow(filtered_data) == 0) {
# If no data for the specific NumberValue, set value to "ID"
CodedNumeralBankFeatures <<- rbind(CodedNumeralBankFeatures, data.frame(
Feature_ID = feature_id,
Glottocode = glotto,
Source = NA,  # Set source to NA or another default value
Value = "ID",
stringsAsFactors = FALSE
))
} else {
# If NumberValue exists, apply the logic function to each Gloss
for (i in 1:nrow(filtered_data)) {
Gloss_value <- filtered_data$Gloss[i]
value <- logic_function(Gloss_value, NumberValue)
# Add a new row (preserving Source and Coder if available)
CodedNumeralBankFeatures <<- rbind(CodedNumeralBankFeatures, data.frame(
Feature_ID = feature_id,
Glottocode = filtered_data$Glottocode[i],
Source = filtered_data$Source[i],
Value = value,
stringsAsFactors = FALSE
))
}
}
}
}
merged3 <- merged2%>% rename(Glottocode = glottocode)
#run the function: NB02	Is there a 3 derived by arithmetic operation?
is_this_numeral_derived ("NB02", 3, is_derived, merged3)
coded <- CodedNumeralBankFeatures %>% pivot_wider(names_from = "Feature_ID",
values_from = "Value")
View(coded)
is_this_numeral_derived ("NB02", 3, is_derived, glossed_15_languages)
is_this_numeral_derived ("NB02", 3, is_derived, merged3)
View(CodedNumeralBankFeatures)
is_this_numeral_derived ("NB06", 5, is_derived, merged3)
View(CodedNumeralBankFeatures)
coded <- CodedNumeralBankFeatures %>% pivot_wider(names_from = "Feature_ID",
values_from = "Value")
if (!exists("CodedNumeralBankFeatures")) {
CodedNumeralBankFeatures <- tibble(
Feature_ID = character(),
Glottocode = character(),
Source = character(),
Value = character()
)
}
# function to check if a "Gloss" contains an arithmetic operator and that none of the constituents is equal to the parameter in focus
is_derived <- function(Gloss, NumberValue) {
if (is.na(Gloss)) {
return(NA)  # Return NA if Gloss is missing
} else if (Gloss == "?") {
return("?")  # Return '?' for incomplete or unclear data
} else if (grepl("\\+|\\-|\\Â·", Gloss) && Gloss != as.character(NumberValue)) {
return("1")  # Derived if it contains arithmetic operator and is not equal to NumberValue
} else if (Gloss == as.numeric(NumberValue)) {
return("0")  # Not derived if Gloss equals NumberValue
} else {
return("0")  # Default to not derived if no operator and no match to NumberValue
}
}
# Function to process and populate based on whether the Gloss is derived
is_this_numeral_derived <- function(feature_id, NumberValue, logic_function, data) {
# gets unique Glottocodes
glottocodes <- unique(data$Glottocode)
# a loop through each Glottocode
for (glotto in glottocodes) {
# Filter data for the specific NumberValue and Glottocode
filtered_data <- data[data$NumberValue == NumberValue & data$Glottocode == glotto, ]
if (nrow(filtered_data) == 0) {
# If no data for the specific NumberValue, set value to "ID"
CodedNumeralBankFeatures <<- rbind(CodedNumeralBankFeatures, data.frame(
Feature_ID = feature_id,
Glottocode = glotto,
Source = NA,  # Set source to NA or another default value
Value = "ID",
stringsAsFactors = FALSE
))
} else {
# If NumberValue exists, apply the logic function to each Gloss
for (i in 1:nrow(filtered_data)) {
Gloss_value <- filtered_data$Gloss[i]
value <- logic_function(Gloss_value, NumberValue)
# Add a new row (preserving Source and Coder if available)
CodedNumeralBankFeatures <<- rbind(CodedNumeralBankFeatures, data.frame(
Feature_ID = feature_id,
Glottocode = filtered_data$Glottocode[i],
Source = filtered_data$Source[i],
Value = value,
stringsAsFactors = FALSE
))
}
}
}
}
merged3 <- merged2%>% rename(Glottocode = glottocode)
setwd("~/Documents/Numeralbank_analysed/etc/glossed")
library(readr)
library(purrr)
library(dplyr)
folder_path <- "Russell_2"
csv_files <- list.files(folder_path, pattern = "\\.csv$", full.names = TRUE)
# Force all columns to be character
combined_data <- map_dfr(csv_files, ~ read_csv(.x, col_types = cols(.default = col_character()))) %>%
select(ID, Language_ID, Parameter_ID, NumberValue, Value, Form, Gloss, Comment_glosser, Alternate_gloss, Loan, Source)
folder_path2 <- "Russell"
csv_files2 <- list.files(folder_path2, pattern = "\\.csv$", full.names = TRUE)
combined_data2 <- map_dfr(csv_files2, ~ read_csv(.x, col_types = cols(.default = col_character()))) %>%
select(ID, Language_ID, Parameter_ID, NumberValue, Value, Form, Gloss, Comment_glosser, Alternate_gloss, Loan, Source)
folder_path3 <- "Russell_3"
csv_files3 <- list.files(folder_path3, pattern = "\\.csv$", full.names = TRUE)
combined_data3 <- map_dfr(csv_files3, ~ read_csv(.x, col_types = cols(.default = col_character()))) %>%
select(ID, Language_ID, Parameter_ID, NumberValue, Value, Form, Gloss, Comment_glosser, Alternate_gloss, Loan, Source)
merged <- rbind(combined_data, combined_data2, combined_data3)
merged2 <- merged %>% mutate(glottocode = str_extract(Language_ID, "(?<=-)[a-z0-9]+")) %>%
filter(!is.na(glottocode))
glossed_values <- read_csv('/Users/enock/Documents/decimal_loss/data/language_sample.csv') %>%
select(Name, Glottocode, Glottolog_Name, tree_name) %>%
rename(glottocode = Glottocode)
glossed_values2 <- left_join(glossed_values, merged2, by = "glottocode") %>%
filter(!is.na(ID))
glossed_values <- read_csv('/Users/enock/Documents/decimal_loss/data/language_sample.csv') %>%
select(Name, Glottocode, Glottolog_Name, tree_name) %>%
rename(glottocode = Glottocode)
glossed_values2 <- left_join(glossed_values, merged2, by = "glottocode") %>%
filter(!is.na(ID))
glossed_values2 <- glossed %>% rename(Glottocode = glottocode)
glossed_values2 <- glossed_values2 %>% rename(Glottocode = glottocode)
is_this_numeral_derived ("five", 5, is_derived, glossed_values2)
is_this_numeral_derived ("six", 6, is_derived, glossed_values2)
is_this_numeral_derived ("seven", 7, is_derived, glossed_values2)
is_this_numeral_derived ("eight", 8, is_derived, glossed_values2)
is_this_numeral_derived ("nine", 9, is_derived, glossed_values2)
is_this_numeral_derived ("ten", 10, is_derived, glossed_values2)
is_this_numeral_derived ("fifteen", 15, is_derived, glossed_akan_data)
is_this_numeral_derived ("fifteen", 15, is_derived, glossed_values2)
is_this_numeral_derived ("twenty", 20, is_derived, glossed_values2)
is_this_numeral_derived ("thirty", 30, is_derived, glossed_values2)
is_this_numeral_derived ("forty", 40, is_derived, glossed_values2)
is_this_numeral_derived ("fifty", 50, is_derived, glossed_values2)
is_this_numeral_derived ("sixty", 60, is_derived, glossed_values2)
is_this_numeral_derived ("seventy", 70, is_derived, glossed_values2)
is_this_numeral_derived ("eighty", 80, is_derived, glossed_values2)
is_this_numeral_derived ("ninety", 90, is_derived, glossed_values2)
coded <- CodedNumeralBankFeatures %>% pivot_wider(names_from = "Feature_ID",
values_from = "Value")
